package com.example.justracing;

import java.util.ArrayList;
import java.util.Hashtable;


public class Graph {
	private Hashtable<Integer, Long> nodes;
	private int level;
	private long startSeed;
	private Lehmer randomClass;
	
	
	public Graph () {
		nodes = new Hashtable<Integer, Long>();
		level = 0;
		startSeed = 897987;
		randomClass = new Lehmer();
	}
	
	public long getStartSeed() {
		return startSeed;
	}
	
	public ArrayList<Long> initializeGraph(long pActualSeed) {
		ArrayList<Long> seeds = new ArrayList<Long>();
		level++;
		int newKey = level-1;
		nodes.put(newKey, pActualSeed);
		if (verifyIfSuggestRoad(level)){
			suggestRoad(pActualSeed);
		}
	}
	
	public long suggestRoad (long pSeed) {
		randomClass.setMaxNumber(4);
		int randomKey = (int) randomClass.doLhemer(pSeed);
		long randomSeed = nodes.get(randomKey);
		randomClass.setMaxNumber(2^60);
		return randomSeed;
	}
	
	public boolean verifyIfSuggestRoad(int pLevel) {
		if ((pLevel % 4) == 0)
			return true;
		else
			return false;
	}
	
	
	
	
}
